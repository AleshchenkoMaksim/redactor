{"version":3,"sources":["RedactorInput.js"],"names":["$","Craft","RedactorInput","Garnish","Base","extend","id","linkOptions","volumes","elementSiteId","redactorConfig","$textarea","redactor","linkOptionModals","init","settings","this","transforms","lang","redactorLang","direction","orientation","imageUpload","fileUpload","dragImageUpload","dragFileUpload","plugins","push","buttons","index","inArray","splice","unshift","lowestListButtonIndex","oldListButtons","i","length","callbacks","started","handleRedactorInit","focus","onEditorFocus","bind","blur","onEditorBlur","initRedactor","mergeCallbacks","callback1","callback2","apply","arguments","selector","toolbarFixed","target","closest","toolbarFixedTarget","currentInstance","$R","plugin","craftAssetImages","overrideButton","setTransforms","setVolumes","setElementSiteId","craftAssetFiles","craftEntryLinks","setLinkOptions","onInitRedactor","container","getElement","addClass","leaveFullscreetOnSaveShortcut","opts","scrollPageOnReady","$doc","ready","trigger","removeClass","fullscreen","close","cp","on","proxy","isOpen","replaceRedactorButton","key","title","allButtons","toolbar","getButtonsKeys","indexOf","previousButton","getButtonByIndex","icon","$icon","get","placeholderKey","placeholder","addButtonAfter","remove","button","setIcon","jQuery"],"mappings":"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","file":"RedactorInput.min.js","sourcesContent":["(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    /**\n     * Redactor input class\n     */\n    Craft.RedactorInput = Garnish.Base.extend(\n        {\n            id: null,\n            linkOptions: null,\n            volumes: null,\n            elementSiteId: null,\n            redactorConfig: null,\n\n            $textarea: null,\n            redactor: null,\n            linkOptionModals: null,\n\n            init: function(settings) {\n                this.id = settings.id;\n                this.linkOptions = settings.linkOptions;\n                this.volumes = settings.volumes;\n                this.transforms = settings.transforms;\n                this.elementSiteId = settings.elementSiteId;\n                this.redactorConfig = settings.redactorConfig;\n\n                this.linkOptionModals = [];\n\n                if (!this.redactorConfig.lang) {\n                    this.redactorConfig.lang = settings.redactorLang;\n                }\n\n                if (!this.redactorConfig.direction) {\n                    this.redactorConfig.direction = (settings.direction || Craft.orientation);\n                }\n\n                this.redactorConfig.imageUpload = true;\n                this.redactorConfig.fileUpload = true;\n                this.redactorConfig.dragImageUpload = false;\n                this.redactorConfig.dragFileUpload = false;\n\n                // Prevent a JS error when calling core.destroy() when opts.plugins == false\n                if (typeof this.redactorConfig.plugins !== typeof []) {\n                    this.redactorConfig.plugins = [];\n                }\n\n                this.redactorConfig.plugins.push('craftAssetImages');\n                this.redactorConfig.plugins.push('craftAssetFiles');\n                this.redactorConfig.plugins.push('craftEntryLinks');\n\n                // Redactor I config setting normalization\n                if (this.redactorConfig.buttons) {\n                    var index;\n\n                    // buttons.html => plugins.source\n                    if ((index = $.inArray('html', this.redactorConfig.buttons)) !== -1) {\n                        this.redactorConfig.buttons.splice(index, 1);\n                        this.redactorConfig.plugins.unshift('source');\n                    }\n\n                    // buttons.formatting => buttons.format\n                    if ((index = $.inArray('formatting', this.redactorConfig.buttons)) !== -1) {\n                        this.redactorConfig.buttons.splice(index, 1, 'format');\n                    }\n\n                    // buttons.unorderedlist/orderedlist/undent/indent => buttons.lists\n                    var oldListButtons = ['unorderedlist', 'orderedlist', 'undent', 'indent'],\n                        lowestListButtonIndex;\n\n                    for (var i = 0; i < oldListButtons.length; i++) {\n                        if ((index = $.inArray(oldListButtons[i], this.redactorConfig.buttons)) !== -1) {\n                            this.redactorConfig.buttons.splice(index, 1);\n\n                            if (typeof lowestListButtonIndex === 'undefined' || index < lowestListButtonIndex) {\n                                lowestListButtonIndex = index;\n                            }\n                        }\n                    }\n\n                    if (typeof lowestListButtonIndex !== 'undefined') {\n                        this.redactorConfig.buttons.splice(lowestListButtonIndex, 0, 'lists');\n                    }\n                }\n\n                // Define our callbacks\n                this.redactorConfig.callbacks = {\n                    started: Craft.RedactorInput.handleRedactorInit,\n                    focus: this.onEditorFocus.bind(this),\n                    blur: this.onEditorBlur.bind(this)\n                };\n\n                // Initialize Redactor\n                this.initRedactor();\n\n                // if (typeof Craft.livePreview !== 'undefined') {\n                //     // There's a UI glitch if Redactor is in Code view when Live Preview is shown/hidden\n                //     Craft.livePreview.on('beforeEnter beforeExit', $.proxy(function() {\n                //         this.redactor.core.destroy();\n                //     }, this));\n                //\n                //     Craft.livePreview.on('enter slideOut', $.proxy(function() {\n                //         this.initRedactor();\n                //     }, this));\n                // }\n            },\n\n            mergeCallbacks: function(callback1, callback2) {\n                return function() {\n                    callback1.apply(this, arguments);\n                    callback2.apply(this, arguments);\n                };\n            },\n\n            initRedactor: function() {\n                var selector = '#' + this.id;\n                this.$textarea = $(selector);\n\n                if (this.redactorConfig.toolbarFixed) {\n                    // Set the toolbarFixedTarget depending on the context\n                    var target = this.$textarea.closest('#content-container, .lp-editor');\n                    if (target.length) {\n                        this.redactorConfig.toolbarFixedTarget = target;\n                    }\n                }\n\n                Craft.RedactorInput.currentInstance = this;\n                this.$textarea.redactor(this.redactorConfig);\n\n                this.redactor = $R(selector);\n                this.redactor.plugin.craftAssetImages.overrideButton('image');\n                this.redactor.plugin.craftAssetImages.setTransforms(this.transforms);\n                this.redactor.plugin.craftAssetImages.setVolumes(this.volumes);\n                this.redactor.plugin.craftAssetImages.setElementSiteId(this.elementSiteId);\n\n                this.redactor.plugin.craftAssetFiles.overrideButton('file');\n                this.redactor.plugin.craftAssetFiles.setVolumes(this.volumes);\n                this.redactor.plugin.craftAssetFiles.setElementSiteId(this.elementSiteId);\n\n                this.redactor.plugin.craftEntryLinks.setElementSiteId(this.elementSiteId);\n\n                if (this.linkOptions.length) {\n                    this.redactor.plugin.craftEntryLinks.setLinkOptions(this.linkOptions);\n                }\n\n                delete Craft.RedactorInput.currentInstance;\n            },\n\n            onInitRedactor: function(redactor) {\n\n                this.redactor = redactor;\n\n                // Add the .focusable-input class for Craft.CP\n                this.redactor.container.getElement().addClass('focusable-input');\n\n                this.leaveFullscreetOnSaveShortcut();\n\n                if (this.redactor.opts.toolbarFixed && !Craft.RedactorInput.scrollPageOnReady) {\n                    Garnish.$doc.ready(function() {\n                        Garnish.$doc.trigger('scroll');\n                    });\n\n                    Craft.RedactorInput.scrollPageOnReady = true;\n                }\n            },\n\n            onEditorFocus: function() {\n                this.redactor.container.getElement().addClass('focus');\n                this.redactor.container.getElement().trigger('focus');\n            },\n\n            onEditorBlur: function() {\n                this.redactor.container.getElement().removeClass('focus');\n                this.redactor.container.getElement().trigger('blur');\n            },\n\n            leaveFullscreetOnSaveShortcut: function() {\n                if (typeof this.redactor.plugin.fullscreen !== 'undefined' && typeof this.redactor.plugin.fullscreen.close === 'function') {\n                    Craft.cp.on('beforeSaveShortcut', $.proxy(function() {\n                        if (this.redactor.plugin.fullscreen.isOpen) {\n                            this.redactor.plugin.fullscreen.close();\n                        }\n                    }, this));\n                }\n            },\n\n            replaceRedactorButton: function(key, title) {\n                // Ignore if the button isn't in use\n                var allButtons = this.redactor.toolbar.getButtonsKeys();\n                var currentButtonIndex = allButtons.indexOf(key);\n\n                if (currentButtonIndex == -1) {\n                    return;\n                }\n\n                var previousButton = this.redactor.toolbar.getButtonByIndex(allButtons.indexOf(key));\n                var icon = previousButton.$icon.get(0);\n\n                var placeholderKey = key+'_placeholder';\n                var placeholder = this.redactor.toolbar.addButtonAfter(key, placeholderKey, {title: title});\n                previousButton.remove();\n\n                // Create the new button\n                var button = this.redactor.toolbar.addButtonAfter(placeholderKey, key, {title: title});\n                placeholder.remove();\n\n                button.setIcon(icon);\n\n                return button;\n            }\n        },\n        {\n            handleRedactorInit: function() {\n                // `this` is the current Redactor instance.\n                // `Craft.RedactorInput.currentInstance` is the current RedactorInput instance\n                Craft.RedactorInput.currentInstance.onInitRedactor(this);\n            }\n        });\n})(jQuery);\n"]}