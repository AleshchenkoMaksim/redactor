{"version":3,"sources":["RedactorInput.js"],"names":["$","Craft","RedactorInput","Garnish","Base","extend","id","linkOptions","volumes","elementSiteId","redactorConfig","$textarea","redactor","linkOptionModals","init","settings","this","transforms","lang","redactorLang","direction","orientation","imageUpload","fileUpload","dragImageUpload","dragFileUpload","plugins","push","buttons","index","inArray","splice","unshift","lowestListButtonIndex","oldListButtons","i","length","callbacks","started","handleRedactorInit","initRedactor","livePreview","on","proxy","core","destroy","mergeCallbacks","callback1","callback2","apply","arguments","selector","toolbarFixed","target","closest","toolbarFixedTarget","currentInstance","$R","plugin","craftAssetImages","overrideButton","setTransforms","setVolumes","setElementSiteId","craftAssetFiles","craftEntryLinks","setLinkOptions","onInitRedactor","container","getElement","addClass","opts","toolbar","customizeToolbar","leaveFullscreetOnSaveShortcut","imageBtn","replaceRedactorButton","get","$icon","button","remove","$linkBtn","dropdownOptions","title","optionTitle","func","link","observe","element","in","out","unlink","attr","class","aria-disabled","addDropdown","onImageButtonClick","selection","save","assetSelectionModal","createElementSelectorModal","storageKey","multiSelect","sources","criteria","siteId","kind","onSelect","assets","transform","restore","asset","url","insert","node","imageTag","code","sync","images","closeOtherModals","show","onFileButtonClick","assetLinkSelectionModal","text","label","onLinkOptionClick","key","elementType","elements","refHandle","onEditorFocus","box","trigger","onEditorBlur","removeClass","fullscreen","disable","cp","isOpen","allButtons","getButtonsKeys","indexOf","previousButton","getButtonByIndex","icon","placeholderKey","placeholder","addButtonAfter","setIcon","jQuery"],"mappings":"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","file":"RedactorInput.min.js","sourcesContent":["(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    /**\n     * Redactor input class\n     */\n    Craft.RedactorInput = Garnish.Base.extend(\n        {\n            id: null,\n            linkOptions: null,\n            volumes: null,\n            elementSiteId: null,\n            redactorConfig: null,\n\n            $textarea: null,\n            redactor: null,\n            linkOptionModals: null,\n\n            init: function(settings) {\n                this.id = settings.id;\n                this.linkOptions = settings.linkOptions;\n                this.volumes = settings.volumes;\n                this.transforms = settings.transforms;\n                this.elementSiteId = settings.elementSiteId;\n                this.redactorConfig = settings.redactorConfig;\n\n                this.linkOptionModals = [];\n\n                if (!this.redactorConfig.lang) {\n                    this.redactorConfig.lang = settings.redactorLang;\n                }\n\n                if (!this.redactorConfig.direction) {\n                    this.redactorConfig.direction = (settings.direction || Craft.orientation);\n                }\n\n                this.redactorConfig.imageUpload = true;\n                this.redactorConfig.fileUpload = true;\n                this.redactorConfig.dragImageUpload = false;\n                this.redactorConfig.dragFileUpload = false;\n\n                // Prevent a JS error when calling core.destroy() when opts.plugins == false\n                if (typeof this.redactorConfig.plugins !== typeof []) {\n                    this.redactorConfig.plugins = [];\n                }\n\n                this.redactorConfig.plugins.push('craftAssetImages');\n                this.redactorConfig.plugins.push('craftAssetFiles');\n                this.redactorConfig.plugins.push('craftEntryLinks');\n\n                // Redactor I config setting normalization\n                if (this.redactorConfig.buttons) {\n                    var index;\n\n                    // buttons.html => plugins.source\n                    if ((index = $.inArray('html', this.redactorConfig.buttons)) !== -1) {\n                        this.redactorConfig.buttons.splice(index, 1);\n                        this.redactorConfig.plugins.unshift('source');\n                    }\n\n                    // buttons.formatting => buttons.format\n                    if ((index = $.inArray('formatting', this.redactorConfig.buttons)) !== -1) {\n                        this.redactorConfig.buttons.splice(index, 1, 'format');\n                    }\n\n                    // buttons.unorderedlist/orderedlist/undent/indent => buttons.lists\n                    var oldListButtons = ['unorderedlist', 'orderedlist', 'undent', 'indent'],\n                        lowestListButtonIndex;\n\n                    for (var i = 0; i < oldListButtons.length; i++) {\n                        if ((index = $.inArray(oldListButtons[i], this.redactorConfig.buttons)) !== -1) {\n                            this.redactorConfig.buttons.splice(index, 1);\n\n                            if (typeof lowestListButtonIndex === 'undefined' || index < lowestListButtonIndex) {\n                                lowestListButtonIndex = index;\n                            }\n                        }\n                    }\n\n                    if (typeof lowestListButtonIndex !== 'undefined') {\n                        this.redactorConfig.buttons.splice(lowestListButtonIndex, 0, 'lists');\n                    }\n                }\n\n                this.redactorConfig.callbacks = {\n                    started: Craft.RedactorInput.handleRedactorInit\n                };\n\n                // Initialize Redactor\n                this.initRedactor();\n\n                if (typeof Craft.livePreview !== 'undefined') {\n                    // There's a UI glitch if Redactor is in Code view when Live Preview is shown/hidden\n                    Craft.livePreview.on('beforeEnter beforeExit', $.proxy(function() {\n                        this.redactor.core.destroy();\n                    }, this));\n\n                    Craft.livePreview.on('enter slideOut', $.proxy(function() {\n                        this.initRedactor();\n                    }, this));\n                }\n            },\n\n            mergeCallbacks: function(callback1, callback2) {\n                return function() {\n                    callback1.apply(this, arguments);\n                    callback2.apply(this, arguments);\n                };\n            },\n\n            initRedactor: function() {\n                var selector = '#' + this.id;\n                this.$textarea = $(selector);\n\n                if (this.redactorConfig.toolbarFixed) {\n                    // Set the toolbarFixedTarget depending on the context\n                    var target = this.$textarea.closest('#content-container, .lp-editor');\n                    if (target.length) {\n                        this.redactorConfig.toolbarFixedTarget = target;\n                    }\n                }\n\n                Craft.RedactorInput.currentInstance = this;\n                this.$textarea.redactor(this.redactorConfig);\n\n                this.redactor = $R(selector);\n                this.redactor.plugin.craftAssetImages.overrideButton('image');\n                this.redactor.plugin.craftAssetImages.setTransforms(this.transforms);\n                this.redactor.plugin.craftAssetImages.setVolumes(this.volumes);\n                this.redactor.plugin.craftAssetImages.setElementSiteId(this.elementSiteId);\n\n                this.redactor.plugin.craftAssetFiles.overrideButton('file');\n                this.redactor.plugin.craftAssetFiles.setVolumes(this.volumes);\n                this.redactor.plugin.craftAssetFiles.setElementSiteId(this.elementSiteId);\n\n                this.redactor.plugin.craftEntryLinks.setElementSiteId(this.elementSiteId);\n                if (this.linkOptions.length) {\n                    this.redactor.plugin.craftEntryLinks.setLinkOptions(this.linkOptions);\n                }\n\n                delete Craft.RedactorInput.currentInstance;\n            },\n\n            onInitRedactor: function(redactor) {\n                this.redactor = redactor;\n\n                // Add the .focusable-input class for Craft.CP\n                this.redactor.container.getElement().addClass('focusable-input');\n\n                // Only customize the toolbar if there is one,\n                // otherwise we get a JS error due to redactor.$toolbar being undefined\n                if (this.redactor.opts.toolbar) {\n                    this.customizeToolbar();\n                }\n\n                this.leaveFullscreetOnSaveShortcut();\nreturn;\n                this.redactor.core.editor()\n                    .on('focus', $.proxy(this, 'onEditorFocus'))\n                    .on('blur', $.proxy(this, 'onEditorBlur'));\n\n                if (this.redactor.opts.toolbarFixed && !Craft.RedactorInput.scrollPageOnReady) {\n                    Garnish.$doc.ready(function() {\n                        Garnish.$doc.trigger('scroll');\n                    });\n\n                    Craft.RedactorInput.scrollPageOnReady = true;\n                }\n            },\n\n            customizeToolbar: function() {\n                // Override the Image and File buttons?\n                if (this.volumes.length) {\n                    var imageBtn = this.replaceRedactorButton('image', this.redactor.lang.get('image')),\n                        fileBtn = this.replaceRedactorButton('file', this.redactor.lang.get('file'));\n\n                    if (imageBtn) {\n                        imageBtn.$icon.on('cick', $.proxy(this, 'onImageButtonClick'));\n                    }\nreturn;\n                    if (fileBtn) {\n                        this.redactor.button.addCallback($fileBtn, $.proxy(this, 'onFileButtonClick'));\n                    }\n                }\n                else {\n                    // Image and File buttons aren't supported\n                    this.redactor.button.remove('image');\n                    this.redactor.button.remove('file');\n                }\n\n                // Override the Link button?\n                if (this.linkOptions.length) {\n                    var $linkBtn = this.replaceRedactorButton('link', this.redactor.lang.get('link'));\n\n                    if ($linkBtn) {\n                        var dropdownOptions = {};\n\n                        for (var i = 0; i < this.linkOptions.length; i++) {\n                            dropdownOptions['link_option' + i] = {\n                                title: this.linkOptions[i].optionTitle,\n                                func: $.proxy(this, 'onLinkOptionClick', i)\n                            };\n                        }\n\n                        // Add the default Link options\n                        $.extend(dropdownOptions, {\n                            link: {\n                                title: this.redactor.lang.get('link-insert'),\n                                func: 'link.show',\n                                observe: {\n                                    element: 'a',\n                                    in: {\n                                        title: this.redactor.lang.get('link-edit')\n                                    },\n                                    out: {\n                                        title: this.redactor.lang.get('link-insert')\n                                    }\n                                }\n                            },\n                            unlink: {\n                                title: this.redactor.lang.get('unlink'),\n                                func: 'link.unlink',\n                                observe: {\n                                    element: 'a',\n                                    out: {\n                                        attr: {\n                                            'class': 'redactor-dropdown-link-inactive',\n                                            'aria-disabled': true\n                                        }\n                                    }\n                                }\n                            }\n                        });\n\n                        this.redactor.button.addDropdown($linkBtn, dropdownOptions);\n                    }\n                }\n            },\n\n            onImageButtonClick: function() {\n                this.redactor.selection.save();\n\n                if (typeof this.assetSelectionModal === 'undefined') {\n                    this.assetSelectionModal = Craft.createElementSelectorModal('craft\\\\elements\\\\Asset', {\n                        storageKey: 'RedactorInput.ChooseImage',\n                        multiSelect: true,\n                        sources: this.volumes,\n                        criteria: {siteId: this.elementSiteId, kind: 'image'},\n                        onSelect: $.proxy(function(assets, transform) {\n                            if (assets.length) {\n                                this.redactor.selection.restore();\n                                for (var i = 0; i < assets.length; i++) {\n                                    var asset = assets[i],\n                                        url = asset.url + '#asset:' + asset.id;\n\n                                    if (transform) {\n                                        url += ':transform:' + transform;\n                                    }\n\n                                    this.redactor.insert.node($('<' + this.redactor.opts.imageTag + '><img src=\"' + url + '\" /></figure>')[0]);\n                                    this.redactor.code.sync();\n                                }\n                                this.redactor.observe.images();\n                            }\n                        }, this),\n                        closeOtherModals: false,\n                        transforms: this.transforms\n                    });\n                }\n                else {\n                    this.assetSelectionModal.show();\n                }\n            },\n\n            onFileButtonClick: function() {\n                this.redactor.selection.save();\n\n                if (typeof this.assetLinkSelectionModal === 'undefined') {\n                    this.assetLinkSelectionModal = Craft.createElementSelectorModal('craft\\\\elements\\\\Asset', {\n                        storageKey: 'RedactorInput.LinkToAsset',\n                        sources: this.volumes,\n                        criteria: {siteId: this.elementSiteId},\n                        onSelect: $.proxy(function(assets) {\n                            if (assets.length) {\n                                this.redactor.selection.restore();\n                                var asset = assets[0],\n                                    url = asset.url + '#asset:' + asset.id,\n                                    selection = this.redactor.selection.text(),\n                                    title = selection.length > 0 ? selection : asset.label;\n                                this.redactor.insert.node($('<a href=\"' + url + '\">' + title + '</a>')[0]);\n                                this.redactor.code.sync();\n                            }\n                        }, this),\n                        closeOtherModals: false,\n                        transforms: this.transforms\n                    });\n                }\n                else {\n                    this.assetLinkSelectionModal.show();\n                }\n            },\n\n            onLinkOptionClick: function(key) {\n                this.redactor.selection.save();\n\n                if (typeof this.linkOptionModals[key] === 'undefined') {\n                    var settings = this.linkOptions[key];\n\n                    this.linkOptionModals[key] = Craft.createElementSelectorModal(settings.elementType, {\n                        storageKey: (settings.storageKey || 'RedactorInput.LinkTo.' + settings.elementType),\n                        sources: settings.sources,\n                        criteria: $.extend({siteId: this.elementSiteId}, settings.criteria),\n                        onSelect: $.proxy(function(elements) {\n                            if (elements.length) {\n                                this.redactor.selection.restore();\n                                var element = elements[0],\n                                    url = element.url + '#' + settings.refHandle + ':' + element.id,\n                                    selection = this.redactor.selection.text(),\n                                    title = selection.length > 0 ? selection : element.label;\n                                this.redactor.insert.node($('<a href=\"' + url + '\">' + title + '</a>')[0]);\n                                this.redactor.code.sync();\n                            }\n                        }, this),\n                        closeOtherModals: false\n                    });\n                }\n                else {\n                    this.linkOptionModals[key].show();\n                }\n            },\n\n            onEditorFocus: function() {\n                this.redactor.core.box().addClass('focus');\n                this.redactor.core.box().trigger('focus');\n            },\n\n            onEditorBlur: function() {\n                this.redactor.core.box().removeClass('focus');\n                this.redactor.core.box().trigger('blur');\n            },\n\n            leaveFullscreetOnSaveShortcut: function() {\n                if (typeof this.redactor.fullscreen !== 'undefined' && typeof this.redactor.fullscreen.disable === 'function') {\n                    Craft.cp.on('beforeSaveShortcut', $.proxy(function() {\n                        if (this.redactor.fullscreen.isOpen) {\n                            this.redactor.fullscreen.disable();\n                        }\n                    }, this));\n                }\n            },\n\n            replaceRedactorButton: function(key, title) {\n                // Ignore if the button isn't in use\n                var allButtons = this.redactor.toolbar.getButtonsKeys();\n                var currentButtonIndex = allButtons.indexOf(key);\n\n                if (currentButtonIndex == -1) {\n                    return;\n                }\n\n                var previousButton = this.redactor.toolbar.getButtonByIndex(allButtons.indexOf(key));\n                var icon = previousButton.$icon.get(0);\n\n                var placeholderKey = key+'_placeholder';\n                var placeholder = this.redactor.toolbar.addButtonAfter(key, placeholderKey, {title: title});\n                previousButton.remove();\n\n                // Create the new button\n                var button = this.redactor.toolbar.addButtonAfter(placeholderKey, key, {title: title});\n                placeholder.remove();\n\n                button.setIcon(icon);\n\n                return button;\n            }\n        },\n        {\n            handleRedactorInit: function() {\n                // `this` is the current Redactor instance.\n                // `Craft.RedactorInput.currentInstance` is the current RedactorInput instance\n                //Craft.RedactorInput.currentInstance.onInitRedactor(this);\n            }\n        });\n})(jQuery);\n"]}