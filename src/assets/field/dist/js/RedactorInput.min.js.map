{"version":3,"sources":["RedactorInput.js"],"names":["window","livePreviewHideFullscreen","$","Craft","RedactorInput","Garnish","Base","extend","id","linkOptions","volumes","elementSiteId","redactorConfig","$textarea","redactor","linkOptionModals","init","settings","this","transforms","lang","redactorLang","direction","orientation","imageUpload","fileUpload","plugins","removeNewLines","push","buttons","index","inArray","splice","lowestListButtonIndex","oldListButtons","i","length","buttonsAddFirst","buttonsAddBefore","before","buttonsAddAfter","after","buttonsAdd","callbacks","started","handleRedactorInit","focus","onEditorFocus","bind","blur","onEditorBlur","contextbar","showContextBar","initRedactor","selector","toolbarFixed","target","closest","toolbarFixedTarget","currentInstance","console","log","onInitRedactor","container","getElement","addClass","leaveFullscreenOnSaveShortcut","opts","scrollPageOnReady","$doc","ready","trigger","plugin","fullscreen","close","cp","on","proxy","isOpen","replaceRedactorButton","key","title","previousButton","toolbar","getButton","icon","$icon","get","placeholderKey","placeholder","addButtonAfter","remove","button","setIcon","e","justResized","current","selection","getCurrent","data","inspector","parse","repositionContextBar","top","clientY","$contextbar","height","position","left","clientX","width","css","isFigcaption","isComponentType","node","getComponent","$img","find","matches","attr","match","assetId","postActionRequest","success","image-editor","api","args","edit","set","jQuery"],"mappings":"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","file":"RedactorInput.min.js","sourcesContent":["window.livePreviewHideFullscreen = false;\n\n(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    /**\n     * Redactor input class\n     */\n    Craft.RedactorInput = Garnish.Base.extend(\n        {\n            id: null,\n            linkOptions: null,\n            volumes: null,\n            elementSiteId: null,\n            redactorConfig: null,\n\n            $textarea: null,\n            redactor: null,\n            linkOptionModals: null,\n\n            init: function(settings) {\n                this.id = settings.id;\n                this.linkOptions = settings.linkOptions;\n                this.volumes = settings.volumes;\n                this.transforms = settings.transforms;\n                this.elementSiteId = settings.elementSiteId;\n                this.redactorConfig = settings.redactorConfig;\n\n                this.linkOptionModals = [];\n\n                if (!this.redactorConfig.lang) {\n                    this.redactorConfig.lang = settings.redactorLang;\n                }\n\n                if (!this.redactorConfig.direction) {\n                    this.redactorConfig.direction = (settings.direction || Craft.orientation);\n                }\n\n                this.redactorConfig.imageUpload = false;\n                this.redactorConfig.fileUpload = false;\n\n                // Prevent a JS error when calling core.destroy() when opts.plugins == false\n                if (typeof this.redactorConfig.plugins !== typeof []) {\n                    this.redactorConfig.plugins = [];\n                }\n\n                // Prevent Redactor from saving block elements inconsistently\n                if (typeof this.redactorConfig.removeNewLines === 'undefined') {\n                    this.redactorConfig.removeNewLines = true;\n                }\n\n                this.redactorConfig.plugins.push('craftAssetImages');\n                this.redactorConfig.plugins.push('craftAssetFiles');\n                this.redactorConfig.plugins.push('craftEntryLinks');\n                this.redactorConfig.plugins.push('craftAssetImageEditor');\n\n                // Redactor I/II config setting normalization\n                if (this.redactorConfig.buttons) {\n                    var index;\n\n                    // buttons.formatting => buttons.format\n                    if ((index = $.inArray('formatting', this.redactorConfig.buttons)) !== -1) {\n                        this.redactorConfig.buttons.splice(index, 1, 'format');\n                    }\n\n                    // buttons.unorderedlist/orderedlist/undent/indent => buttons.lists\n                    var oldListButtons = ['unorderedlist', 'orderedlist', 'undent', 'indent'],\n                        lowestListButtonIndex;\n\n                    for (var i = 0; i < oldListButtons.length; i++) {\n                        if ((index = $.inArray(oldListButtons[i], this.redactorConfig.buttons)) !== -1) {\n                            this.redactorConfig.buttons.splice(index, 1);\n\n                            if (typeof lowestListButtonIndex === 'undefined' || index < lowestListButtonIndex) {\n                                lowestListButtonIndex = index;\n                            }\n                        }\n                    }\n\n                    if (typeof lowestListButtonIndex !== 'undefined') {\n                        this.redactorConfig.buttons.splice(lowestListButtonIndex, 0, 'lists');\n                    }\n                } else {\n                    this.redactorConfig.buttons = [];\n                }\n\n                // Now mix in the buttons provided by other options, before we start our own shenanigans\n                // `buttonsAddFirst`\n                if (this.redactorConfig.buttonsAddFirst) {\n                    // this.redactorConfig.buttons.splice(0, 0, ...this.redactorConfig.buttonsAddFirst.buttons);\n                }\n\n                // `buttonsAddBefore`\n                if (this.redactorConfig.buttonsAddBefore) {\n                    var index;\n                    for (i = 0; i < this.redactorConfig.buttons.length; i++) {\n                        if (this.redactorConfig.buttons[i] == this.redactorConfig.buttonsAddBefore.before) {\n                            // this.redactorConfig.buttons.splice(i, 0, ...this.redactorConfig.buttonsAddBefore.buttons);\n                            break;\n                        }\n                    }\n                }\n\n                // `buttonsAddAfter`\n                if (this.redactorConfig.buttonsAddAfter) {\n                    var index;\n                    for (i = 0; i < this.redactorConfig.buttons.length; i++) {\n                        if (this.redactorConfig.buttons[i] == this.redactorConfig.buttonsAddAfter.after) {\n                            // this.redactorConfig.buttons.splice(i + 1, 0, ...this.redactorConfig.buttonsAddAfter.buttons);\n                            break;\n                        }\n                    }\n                }\n\n                // `buttonsAdd`\n                if (this.redactorConfig.buttonsAdd) {\n                    // this.redactorConfig.buttons.splice(this.redactorConfig.buttons.length, 0, ...this.redactorConfig.buttonsAdd.buttons);\n                }\n\n                delete this.redactorConfig.buttonsAddFirst;\n                delete this.redactorConfig.buttonsAddBefore;\n                delete this.redactorConfig.buttonsAddAfter;\n                delete this.redactorConfig.buttonsAdd;\n\n                // Define our callbacks\n                this.redactorConfig.callbacks = {\n                    started: Craft.RedactorInput.handleRedactorInit,\n                    focus: this.onEditorFocus.bind(this),\n                    blur: this.onEditorBlur.bind(this),\n                    contextbar: this.showContextBar.bind(this)\n                };\n\n                // Initialize Redactor\n                this.initRedactor();\n            },\n\n            initRedactor: function() {\n                var selector = '#' + this.id;\n                this.$textarea = $(selector);\n\n                if (typeof this.redactorConfig.toolbarFixed === 'undefined' || this.redactorConfig.toolbarFixed) {\n                    // Set the toolbarFixedTarget depending on the context\n                    var target = this.$textarea.closest('#content, .lp-editor');\n                    if (target.length) {\n                        this.redactorConfig.toolbarFixedTarget = target;\n                    }\n                }\n\n\n                Craft.RedactorInput.currentInstance = this;\n                console.log(this.redactorConfig.buttons);\n                this.$textarea.redactor(this.redactorConfig);\n\n                return;\n                this.redactor = $R(selector);\n\n                if (typeof this.redactorConfig.buttons === 'undefined') {\n                    this.redactorConfig.buttons = [];\n                }\n\n                var toolbarButtons = this.redactor.toolbar.getButtonsKeys();\n\n                if (this.redactorConfig.buttons.indexOf('image') !== -1) {\n                    if (toolbarButtons.indexOf('image') !== -1) {\n                        this.redactor.plugin.craftAssetImages.overrideButton('image');\n                    } else {\n                        this.redactor.plugin.craftAssetImages.addButton('image', this.redactorConfig.buttons.indexOf('image'));\n                    }\n                    this.redactor.plugin.craftAssetImages.setTransforms(this.transforms);\n                    this.redactor.plugin.craftAssetImages.setVolumes(this.volumes);\n                    this.redactor.plugin.craftAssetImages.setElementSiteId(this.elementSiteId);\n                }\n\n                if (this.redactorConfig.buttons.indexOf('file') !== -1) {\n                    if (toolbarButtons.indexOf('file') !== -1) {\n                        this.redactor.plugin.craftAssetFiles.overrideButton('file');\n                    } else {\n                        this.redactor.plugin.craftAssetFiles.addButton('file', this.redactorConfig.buttons.indexOf('file'));\n                    }\n                    this.redactor.plugin.craftAssetFiles.setVolumes(this.volumes);\n                    this.redactor.plugin.craftAssetFiles.setElementSiteId(this.elementSiteId);\n                }\n\n                if (toolbarButtons.indexOf('link') !== -1) {\n                    this.redactor.plugin.craftEntryLinks.setElementSiteId(this.elementSiteId);\n\n                    if (this.linkOptions.length) {\n                        this.redactor.plugin.craftEntryLinks.setLinkOptions(this.linkOptions);\n                    }\n                }\n\n                if (this.redactorConfig.plugins.indexOf('fullscreen') !== -1 && typeof Craft.livePreview != \"undefined\" && window.livePreviewHideFullscreen === false) {\n                    window.livePreviewHideFullscreen = true;\n                    Craft.livePreview.on('beforeEnter', function (ev) {\n                       $('a.re-button.re-fullscreen').addClass('hidden');\n                    });\n                    Craft.livePreview.on('beforeExit', function (ev) {\n                        $('a.re-button.re-fullscreen').removeClass('hidden');\n                    });\n                }\n\n                delete Craft.RedactorInput.currentInstance;\n            },\n\n            onInitRedactor: function(redactor) {\n\n                this.redactor = redactor;\n\n                // Add the .focusable-input class for Craft.CP\n                this.redactor.container.getElement().addClass('focusable-input');\n\n                this.leaveFullscreenOnSaveShortcut();\n\n                if (this.redactor.opts.toolbarFixed && !Craft.RedactorInput.scrollPageOnReady) {\n                    Garnish.$doc.ready(function() {\n                        Garnish.$doc.trigger('scroll');\n                    });\n\n                    Craft.RedactorInput.scrollPageOnReady = true;\n                }\n            },\n\n            onEditorFocus: function() {\n                this.redactor.container.getElement().trigger('focus');\n            },\n\n            onEditorBlur: function() {\n                this.redactor.container.getElement().trigger('blur');\n            },\n\n            leaveFullscreenOnSaveShortcut: function() {\n                if (typeof this.redactor.plugin.fullscreen !== 'undefined' && typeof this.redactor.plugin.fullscreen.close === 'function') {\n                    Craft.cp.on('beforeSaveShortcut', $.proxy(function() {\n                        if (this.redactor.plugin.fullscreen.isOpen) {\n                            this.redactor.plugin.fullscreen.close();\n                        }\n                    }, this));\n                }\n            },\n\n            replaceRedactorButton: function(key, title) {\n                var previousButton = this.redactor.toolbar.getButton(key);\n\n                // Ignore if the button isn't in use\n                if (!previousButton) {\n                    return;\n                }\n\n                var icon = previousButton.$icon.get(0);\n\n                var placeholderKey = key+'_placeholder';\n                var placeholder = this.redactor.toolbar.addButtonAfter(key, placeholderKey, {title: title});\n                previousButton.remove();\n\n                // Create the new button\n                var button = this.redactor.toolbar.addButtonAfter(placeholderKey, key, {title: title});\n                placeholder.remove();\n\n                button.setIcon(icon);\n\n                return button;\n            },\n\n            showContextBar: function(e, contextbar) {\n                if (this.justResized)\n                {\n                    this.justResized = false;\n                    return;\n                }\n\n                var current = this.redactor.selection.getCurrent();\n                var data = this.redactor.inspector.parse(current);\n\n                var repositionContextBar = function (e, contextbar) {\n                    var top = e.clientY - contextbar.$contextbar.height() - 10;\n                    var left = e.clientX - contextbar.$contextbar.width() / 2;\n\n                    var position = {\n                        left: left + 'px',\n                        top: top + 'px'\n                    };\n\n                    contextbar.$contextbar.css(position);\n                };\n\n                if (!data.isFigcaption() && data.isComponentType('image'))\n                {\n                    var node = data.getComponent();\n                    var $img  = $(node).find('img');\n                    if ($img.length === 1) {\n                        var matches = matches = $img.attr('src').match(/#asset:(\\d+)/i);\n                        if (matches) {\n                            var assetId = matches[1];\n                            Craft.postActionRequest('redactor', {assetId: assetId}, function (data) {\n                                if (data.success) {\n                                    var buttons = {\n                                        \"image-editor\": {\n                                            title: this.redactor.lang.get('image-editor'),\n                                            api: 'plugin.craftAssetImageEditor.open',\n                                            args: assetId\n                                        },\n                                        \"edit\": {\n                                            title: this.redactor.lang.get('edit'),\n                                            api: 'module.image.open'\n                                        },\n                                        \"remove\": {\n                                            title: this.redactor.lang.get('delete'),\n                                            api: 'module.image.remove',\n                                            args: node\n                                        }\n                                    };\n\n                                    contextbar.set(e, node, buttons);\n                                }\n\n                                repositionContextBar(e, contextbar);\n                            }.bind(this));\n                        }\n                    }\n\n                }\n\n                repositionContextBar(e, contextbar);\n            }\n        },\n        {\n            handleRedactorInit: function() {\n                // `this` is the current Redactor instance.\n                // `Craft.RedactorInput.currentInstance` is the current RedactorInput instance\n                Craft.RedactorInput.currentInstance.onInitRedactor(this);\n            }\n        });\n})(jQuery);\n"]}