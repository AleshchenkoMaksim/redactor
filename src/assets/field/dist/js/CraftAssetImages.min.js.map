{"version":3,"sources":["CraftAssetImages.js"],"names":["plugin","$","extend","Craft","Redactor","PluginBase","title","apiTarget","icon","transforms","volumes","allowAllUploaders","modalState","selectedTransform","showModal","this","app","selection","isCollapsed","save","selectionMarkers","saveMarkers","assetSelectionModal","criteria","siteId","elementSiteId","kind","uploaderId","createElementSelectorModal","storageKey","multiSelect","sources","onSelect","assets","transform","length","restoreMarkers","restore","data","i","asset","id","url","_buildAssetUrl","api","bind","closeOtherModals","show","setTransforms","setVolumes","assetId","assetUrl","_getAssetUrlComponents","matches","match","onmodal","open","modal","form","parts","module","image","$image","$element","nodes","src","options","handle","name","concat","$select","on","ev","currentTarget","val","optionIndex","option","selected","append","$formItem","onimage","changed","attr","newTransform","fadeTo","postActionRequest","response","textStatus","prop","stop","pattern","RegExp","replace","add"],"mappings":"AAAA,IAAIA,OAASC,EAAEC,OAAO,GAAIC,MAAMC,SAASC,WAAY,CACjDC,MAAO,QACPC,UAAW,oCACXC,KAAM,gCACNC,WAAY,GACZC,QAAS,KACTC,mBAAmB,EACnBC,WAAY,CACRC,kBAAmB,MAGvBC,UAAW,WASP,GARIC,KAAKC,IAAIC,UAAUC,eACnBH,KAAKC,IAAIC,UAAUE,OACnBJ,KAAKC,IAAII,kBAAmB,IAE5BL,KAAKC,IAAIC,UAAUI,cACnBN,KAAKC,IAAII,kBAAmB,QAGQ,IAA7BL,KAAKO,oBAAqC,CACjD,MAAMC,EAAW,CACbC,OAAQT,KAAKU,cACbC,KAAM,SAGNX,KAAKJ,oBACLY,EAASI,WAAa,MAG1BZ,KAAKO,oBAAsBnB,MAAMyB,2BAA2B,yBAA0B,CAClFC,WAAY,4BACZC,aAAa,EACbC,QAAShB,KAAKL,QACda,SAAUA,EACVS,SAAU,SAASC,EAAQC,GACvB,GAAID,EAAOE,OAAQ,CACXpB,KAAKC,IAAII,iBACTL,KAAKC,IAAIC,UAAUmB,iBAEnBrB,KAAKC,IAAIC,UAAUoB,UAGvBtB,KAAKC,IAAII,kBAAmB,EAE5B,MAAMkB,EAAO,GAEb,IAAK,IAAIC,EAAI,EAAGA,EAAIN,EAAOE,OAAQI,IAAK,CACpC,MAAMC,EAAQP,EAAOM,GAErBD,EAAK,QAAQE,EAAMC,IAAM,CACrBC,IAAK3B,KAAK4B,eAAeH,EAAMC,GAAID,EAAME,IAAKR,GAC9CO,GAAID,EAAMC,IAIlB1B,KAAKC,IAAI4B,IAAI,sBAAuBN,KAE1CO,KAAK9B,MACP+B,kBAAkB,EAClBrC,WAAYM,KAAKN,kBAGrBM,KAAKO,oBAAoByB,QAIjCC,cAAe,SAAUvC,GACrBM,KAAKN,WAAaA,GAGtBwC,WAAY,SAAUvC,GAClBK,KAAKL,QAAUA,GAGnBiC,eAAgB,CAACO,EAASC,EAAUjB,IAAciB,EAAW,UAAYD,EAAU,KAAOhB,EAAY,aAAeA,EAAY,OAEjIkB,uBAAyBV,IACrB,MAAMW,EAAUX,EAAIY,MAAM,8DAC1B,OAAOD,EAAU,CAACX,IAAKW,EAAQ,GAAIH,QAASG,EAAQ,GAAInB,UAA0B,QAAfmB,EAAQ,GAAeA,EAAQ,GAAK,MAAQ,MAGnHE,QAAS,CACLC,KAAM,SAASC,EAAOC,GAClB3C,KAAKH,WAAWC,kBAAoB,KACpC,MAAM8C,EAAQ5C,KAAKqC,uBAAuBrC,KAAKC,IAAI4C,OAAOC,MAAMC,OAAOC,SAASC,MAAM,GAAGC,KAEzF,IAAKN,EACD,OAGJ,MAAMzB,UAACA,GAAayB,EACpB5C,KAAKH,WAAWC,kBAAoBqB,EACpC,IAAIgC,EAAU,CAAC,CAACC,OAAQ,GAAGC,KAAM,iBAAiBC,OAAOtD,KAAKN,YAE9D,MAAM6D,EAAUrE,EAAE,gDAAgDsE,GAAG,SAAU,SAAUC,GACrFzD,KAAKH,WAAWC,kBAAoBZ,EAAEuE,EAAGC,eAAeC,OAC1D7B,KAAK9B,OAEP,IAAK4D,eAAeT,EAAS,CACzB,IAAIU,EAASV,EAAQS,aACjBE,EAAW3C,GAAa0C,EAAOT,QAAUjC,EAC7CoC,EAAQQ,OAAO,kBAAoBF,EAAOT,OAAS,KAAOU,EAAW,uBAAyB,IAAM,IAAMD,EAAOR,KAAO,aAG5H,MAAMW,EAAY9E,EAAE,yGAAyG6E,OAAOR,GAEpIrE,EAAEyD,EAAKM,MAAM,IAAIc,OAAOC,KAIhCC,QAAS,CACLC,QAAS,SAASpB,GAEd,MAAMC,EAAS7D,EAAE4D,EAAME,SAASC,MAAM,IAChCL,EAAQ5C,KAAKqC,uBAAuBU,EAAOoB,KAAK,QAChDC,EAAepE,KAAKH,WAAWC,kBAErC,IAAK8C,EACD,OAGJ,MAAMzB,UAACA,EAASgB,QAAEA,EAAOR,IAAEA,GAAOiB,EAElC,GAAIzB,GAAaiD,EAMjB,GAFArB,EAAOsB,OAAO,IAAK,IAEfD,EAAahD,OAAQ,CACrB,IAAIG,EAAO,CACPY,QAASA,EACTiB,OAAQgB,GAGZhF,MAAMkF,kBAAkB,4BAA6B/C,EAAM,SAASgD,EAAUC,GACvD,YAAfA,GACID,EAAS5C,MACToB,EAAO0B,KAAK,MAAOzE,KAAK4B,eAAeO,EAASoC,EAAS5C,IAAKyC,IAC9DrB,EAAO2B,OAAOL,OAAO,EAAG,KAIlCvC,KAAK9B,WACJ,CACH,IAAI2E,EAAU,IAAIC,OAAO,SAAWzD,EAAY,YAChD4B,EAAO0B,KAAK,MAAOzE,KAAK4B,eAAeO,EAASR,EAAIkD,QAAQF,EAAS,QAASP,IAC9ErB,EAAO2B,OAAOL,OAAO,EAAG,QAQrChF,SADIyF,IAAI,SAAU,mBAAoB7F","file":"CraftAssetImages.min.js","sourcesContent":["var plugin = $.extend({}, Craft.Redactor.PluginBase, {\n    title: 'image',\n    apiTarget: 'plugin.craftAssetImages.showModal',\n    icon: '<i class=\"re-icon-image\"></i>',\n    transforms: [],\n    volumes: null,\n    allowAllUploaders: false,\n    modalState: {\n        selectedTransform: null\n    },\n\n    showModal: function () {\n        if (this.app.selection.isCollapsed()) {\n            this.app.selection.save();\n            this.app.selectionMarkers = false;\n        } else {\n            this.app.selection.saveMarkers();\n            this.app.selectionMarkers = true;\n        }\n\n        if (typeof this.assetSelectionModal === 'undefined') {\n            const criteria = {\n                siteId: this.elementSiteId,\n                kind: 'image'\n            };\n\n            if (this.allowAllUploaders) {\n                criteria.uploaderId = null;\n            }\n\n            this.assetSelectionModal = Craft.createElementSelectorModal('craft\\\\elements\\\\Asset', {\n                storageKey: 'RedactorInput.ChooseImage',\n                multiSelect: true,\n                sources: this.volumes,\n                criteria: criteria,\n                onSelect: function(assets, transform) {\n                    if (assets.length) {\n                        if (this.app.selectionMarkers) {\n                            this.app.selection.restoreMarkers();\n                        } else {\n                            this.app.selection.restore();\n                        }\n\n                        this.app.selectionMarkers = false;\n\n                        const data = {};\n\n                        for (var i = 0; i < assets.length; i++) {\n                            const asset = assets[i];\n\n                            data['asset'+asset.id] = {\n                                url: this._buildAssetUrl(asset.id, asset.url, transform),\n                                id: asset.id\n                            };\n                        }\n\n                        this.app.api('module.image.insert', data);\n                    }\n                }.bind(this),\n                closeOtherModals: false,\n                transforms: this.transforms\n            });\n        } else {\n            this.assetSelectionModal.show();\n        }\n    },\n\n    setTransforms: function (transforms) {\n        this.transforms = transforms;\n    },\n\n    setVolumes: function (volumes) {\n        this.volumes = volumes;\n    },\n\n    _buildAssetUrl: (assetId, assetUrl, transform) => assetUrl + '#asset:' + assetId + ':' + (transform ? 'transform:' + transform : 'url'),\n\n    _getAssetUrlComponents: (url) => {\n        const matches = url.match(/(.*)#asset:(\\d+):(url|transform):?([a-zA-Z][a-zA-Z0-9_]*)?/);\n        return matches ? {url: matches[1], assetId: matches[2], transform: matches[3] !== 'url' ? matches[4] : null} : null;\n    },\n\n    onmodal: {\n        open: function(modal, form) {\n            this.modalState.selectedTransform = null;\n            const parts = this._getAssetUrlComponents(this.app.module.image.$image.$element.nodes[0].src);\n\n            if (!parts) {\n                return;\n            }\n\n            const {transform} = parts;\n            this.modalState.selectedTransform = transform;\n            let options = [{handle: '',name: \"No transform\"}].concat(this.transforms);\n\n            const $select = $('<select id=\"modal-image-transform\"></select>').on('change', function (ev) {\n                this.modalState.selectedTransform = $(ev.currentTarget).val();\n            }.bind(this));\n\n            for (optionIndex in options) {\n                let option = options[optionIndex];\n                let selected = transform && option.handle == transform;\n                $select.append('<option value=\"' + option.handle + '\"' + (selected ? ' selected=\"selected\"' : '') + '>' + option.name + '</option>');\n            }\n\n            const $formItem = $('<div class=\"form-item form-item-transform\"><label for=\"modal-image-transform\">Transform</label></div>').append($select);\n\n            $(form.nodes[0]).append($formItem);\n        },\n    },\n\n    onimage :{\n        changed: function(image)\n        {\n            const $image = $(image.$element.nodes[0]);\n            const parts = this._getAssetUrlComponents($image.attr('src'));\n            const newTransform = this.modalState.selectedTransform;\n\n            if (!parts) {\n                return;\n            }\n\n            const {transform, assetId, url} = parts;\n\n            if (transform == newTransform) {\n                return;\n            }\n\n            $image.fadeTo(100, 0.2);\n\n            if (newTransform.length) {\n                var data = {\n                    assetId: assetId,\n                    handle: newTransform\n                };\n\n                Craft.postActionRequest('assets/generate-transform', data, function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        if (response.url) {\n                            $image.prop('src', this._buildAssetUrl(assetId, response.url, newTransform));\n                            $image.stop().fadeTo(0, 1);\n                        }\n                    }\n\n                }.bind(this));\n            } else {\n                let pattern = new RegExp('(.*)(_' + transform + '.*\\/)(.*)');\n                $image.prop('src', this._buildAssetUrl(assetId, url.replace(pattern, '$1$3'), newTransform));\n                $image.stop().fadeTo(0, 1);\n            }\n        }\n    }\n});\n\n(function($R) {\n    $R.add('plugin', 'craftAssetImages', plugin);\n})(Redactor);\n"]}