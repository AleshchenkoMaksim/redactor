{"version":3,"sources":["CraftElementLinks.js"],"names":["plugin","$","extend","Craft","Redactor","PluginBase","linkOptions","existingText","start","showModal","arguments","zIndex","refHandle","callback","modal","createElementSelectorModal","elementType","storageKey","sources","criteria","defaultSiteId","this","elementSiteId","onSelect","proxy","elements","length","element","data","url","id","siteId","text","label","temporary","closeOtherModals","$shade","css","$container","setLinkOptions","onmodal","link","open","form","nodes","$form","$formItem","find","val","idx","option","optionTitle","appendTo","on","ev","bind","prepend","add"],"mappings":"AAAA,IAAIA,OAASC,EAAEC,OAAO,GAAIC,MAAMC,SAASC,WAAY,CACjDC,YAAa,GACbC,aAAc,GAGdC,MAAO,aAGPC,UAAW,SAAUC,UAAWC,GAC5B,IAAIC,EAAYF,UAAUE,UACtBC,EAAWH,UAAUG,SAGzB,MAAMC,EAAQX,MAAMY,2BAA2BL,UAAUM,YAAa,CAClEC,WAAY,wBAA0BP,UAAUM,YAChDE,QAASR,UAAUQ,QACnBC,SAAUT,UAAUS,SACpBC,cAAeC,KAAKC,cACpBC,SAAUtB,EAAEuB,OAAM,SAASC,GACvB,GAAIA,EAASC,OAAQ,CACjB,IAAIC,EAAUF,EAAS,GACnBG,EAAO,CACHC,IAAKF,EAAQE,IAAM,IAAMjB,EAAY,IAAMe,EAAQG,GAAK,IAAMH,EAAQI,OACtEC,KAAMX,KAAKd,aAAamB,OAAS,EAAIL,KAAKd,aAAeoB,EAAQM,OAGzEZ,KAAKa,UACLrB,EAASe,MAEdP,MACHc,kBAAkB,IAGtBrB,EAAMsB,OAAOC,IAAI,SAAU1B,EAAS,GACpCG,EAAMwB,WAAWD,IAAI,SAAU1B,EAAS,IAG5C4B,eAAgB,SAAUjC,GACtBe,KAAKf,YAAcA,GAGvBkC,QAAS,CACLC,KAAM,CACFC,KAAM,SAAS5B,EAAO6B,GAClB,MAAMhC,EAASV,EAAEa,EAAM8B,OAAOP,IAAI,UAC9BQ,EAAQ5C,EAAE0C,EAAKC,OACfE,EAAY7C,EAAE,iFAElBoB,KAAKd,aAAesC,EAAME,KAAK,oBAAoBC,MAEnD,IAAK,IAAIC,KAAO5B,KAAKf,YAAa,CAC9B,IAAI4C,EAAS7B,KAAKf,YAAY2C,GAC9BhD,EAAE,oBAAsBiD,EAAOC,YAAc,UAAUC,SAASN,GAAWO,GAAG,QAAS,SAAUC,GAC7FjC,KAAKZ,UAAU,CACXO,YAAakC,EAAOlC,YACpBJ,UAAWsC,EAAOtC,UAClBM,QAASgC,EAAOhC,QAChBC,SAAU+B,EAAO/B,SACjBN,SAAWe,IACPiB,EAAME,KAAK,mBAAmBC,IAAIpB,EAAKC,KACvCgB,EAAME,KAAK,oBAAoBC,IAAIpB,EAAKI,QAE7CrB,IACL4C,KAAKlC,OAGXwB,EAAMW,QAAQV,QAQ3B1C,SADIqD,IAAI,SAAU,oBAAqBzD","file":"CraftElementLinks.min.js","sourcesContent":["var plugin = $.extend({}, Craft.Redactor.PluginBase, {\n    linkOptions: [],\n    existingText: '',\n\n    // Do nothing on start.\n    start: function () {\n\n    },\n    showModal: function (arguments, zIndex) {\n        let refHandle = arguments.refHandle,\n            callback = arguments.callback;\n\n        // Create a new one each time because Redactor creates a new one and we can't reuse the references.\n        const modal = Craft.createElementSelectorModal(arguments.elementType, {\n            storageKey: 'RedactorInput.LinkTo.' + arguments.elementType,\n            sources: arguments.sources,\n            criteria: arguments.criteria,\n            defaultSiteId: this.elementSiteId,\n            onSelect: $.proxy(function(elements) {\n                if (elements.length) {\n                    let element = elements[0],\n                        data = {\n                            url: element.url + '#' + refHandle + ':' + element.id + '@' + element.siteId,\n                            text: this.existingText.length > 0 ? this.existingText : element.label\n                        };\n\n                    this.temporary =\n                    callback(data);\n                }\n            }, this),\n            closeOtherModals: false,\n        });\n       \n        modal.$shade.css('zIndex', zIndex + 1);\n        modal.$container.css('zIndex', zIndex + 2);\n    },\n\n    setLinkOptions: function (linkOptions) {\n        this.linkOptions = linkOptions;\n    },\n\n    onmodal: {\n        link: {\n            open: function(modal, form) {\n                const zIndex = $(modal.nodes).css('zIndex'),\n                    $form = $(form.nodes),\n                    $formItem = $('<div class=\"form-item form-item-link-select\"><label>Pick a link</label></div>');\n\n                this.existingText = $form.find('input[name=text]').val();\n\n                for (let idx in this.linkOptions) {\n                    let option = this.linkOptions[idx];\n                    $('<div class=\"btn\">' + option.optionTitle + '</div>').appendTo($formItem).on('click', function (ev) {\n                        this.showModal({\n                            elementType: option.elementType,\n                            refHandle: option.refHandle,\n                            sources: option.sources,\n                            criteria: option.criteria,\n                            callback: (data) => {\n                                $form.find('input[name=url]').val(data.url);\n                                $form.find('input[name=text]').val(data.text);\n                            }\n                        }, zIndex);\n                    }.bind(this));\n                }\n\n                $form.prepend($formItem);\n            }\n        }\n    }\n});\n\n(function($R) {\n    $R.add('plugin', 'craftElementLinks', plugin);\n})(Redactor);\n"]}